import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import requests
import os
import json
from google.cloud import firestore
from google.oauth2 import service_account

# –ö–æ–Ω—Ñ–∏–≥
FIREBASE_PROJECT_ID = "kosmetolog-de6c1"
FIREBASE_REGION = "us-central1"  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
ADMIN_SHARED_PASSWORD = "adminpassword"  # –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –∑–¥–µ—Å—å
GOOGLE_CREDENTIALS_PATH = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "service-account.json")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firestore c —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
db = None
if os.path.exists(GOOGLE_CREDENTIALS_PATH):
    try:
        creds = service_account.Credentials.from_service_account_file(GOOGLE_CREDENTIALS_PATH)
        db = firestore.Client(credentials=creds, project=FIREBASE_PROJECT_ID)
        print("‚úÖ Firestore admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore admin SDK: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("8222259517:AAHzoORqGx9esgjwHXyfO846K_rOsNi0Gw4")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    markup = InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # URL –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
    web_app_button = InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url="https://ffunde2vip.github.io/telegram-mini-app/")
    )
    
    markup.add(web_app_button)
    
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=markup
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['myid'])
def get_user_id(message):
    bot.send_message(
        message.chat.id,
        f"–í–∞—à ID: {message.from_user.id}\n"
        f"–ò–º—è: {message.from_user.first_name}\n"
        f"Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )

# /admin <password> ‚Äî –ø–æ–≤—ã—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –≤ Firestore)
@bot.message_handler(commands=['admin'])
def make_admin(message):
    try:
        parts = message.text.split(maxsplit=1)
        provided = parts[1].strip() if len(parts) > 1 else ""
        if provided != ADMIN_SHARED_PASSWORD:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        telegram_id = str(message.from_user.id)

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω SDK ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–Ω–∞–¥—ë–∂–Ω–æ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª)
        if db is not None:
            try:
                doc_ref = db.collection('users').document(telegram_id)
                doc_ref.set({
                    'telegramId': int(telegram_id),
                    'isAdmin': True,
                }, merge=True)
                bot.reply_to(message, "‚úÖ –í—ã –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                return
            except Exception as e:
                bot.reply_to(message, f"‚ùå Firestore admin SDK –æ—à–∏–±–∫–∞: {e}")
                return

        # –§–æ–ª–±—ç–∫ –Ω–∞ REST API (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏–ª–∏ –∫–ª—é—á–∞/–ø—Ä–æ–∫—Å–∏)
        url = f"https://firestore.googleapis.com/v1/projects/{FIREBASE_PROJECT_ID}/databases/(default)/documents/users/{telegram_id}?currentDocument.exists=true"
        payload = {
            "fields": {
                "isAdmin": {"booleanValue": True}
            }
        }
        params = {"updateMask.fieldPaths": ["isAdmin"]}
        r = requests.patch(url, json=payload, params=params)
        if 200 <= r.status_code < 300:
            bot.reply_to(message, "‚úÖ –í—ã –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        elif r.status_code == 404:
            create_url = f"https://firestore.googleapis.com/v1/projects/{FIREBASE_PROJECT_ID}/databases/(default)/documents/users?documentId={telegram_id}"
            create_payload = {"fields": {"telegramId": {"integerValue": int(telegram_id)}, "isAdmin": {"booleanValue": True}}}
            cr = requests.post(create_url, json=create_payload)
            if 200 <= cr.status_code < 300:
                bot.reply_to(message, "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            else:
                bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∫–æ–¥ {cr.status_code}).")
        else:
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∫–æ–¥ {r.status_code}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firestore –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ service-account.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /unadmin <password> ‚Äî —Å–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['unadmin'])
def remove_admin(message):
    try:
        parts = message.text.split(maxsplit=1)
        provided = parts[1].strip() if len(parts) > 1 else ""
        if provided != ADMIN_SHARED_PASSWORD:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            return

        telegram_id = str(message.from_user.id)

        if db is not None:
            try:
                doc_ref = db.collection('users').document(telegram_id)
                doc_ref.set({'isAdmin': False}, merge=True)
                bot.reply_to(message, "‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
                return
            except Exception as e:
                bot.reply_to(message, f"‚ùå Firestore admin SDK –æ—à–∏–±–∫–∞: {e}")
                return

        url = f"https://firestore.googleapis.com/v1/projects/{FIREBASE_PROJECT_ID}/databases/(default)/documents/users/{telegram_id}?currentDocument.exists=true"
        payload = {"fields": {"isAdmin": {"booleanValue": False}}}
        params = {"updateMask.fieldPaths": ["isAdmin"]}
        r = requests.patch(url, json=payload, params=params)
        if 200 <= r.status_code < 300:
            bot.reply_to(message, "‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        else:
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∫–æ–¥ {r.status_code}).")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@bot.message_handler(content_types=['web_app_data'])
def web_app_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    data = message.web_app_data.data
    
    bot.send_message(
        message.chat.id,
        f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {data}"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("üì± URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: https://ffunde2vip.github.io/telegram-mini-app/")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º webhook –∏ —É–¥–∞–ª—è–µ–º –≤–∏—Å—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
        # —á—Ç–æ–±—ã –¥—Ä—É–≥–æ–π getUpdates –Ω–µ –¥–µ—Ä–∂–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω (drop_pending_updates=True)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º infinity_polling —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
        print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        bot.infinity_polling(timeout=60, long_polling_timeout=60, skip_pending=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å reset_webhook.py")
        print("   3. –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å bot.py")

