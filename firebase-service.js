// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Firestore
class FirebaseService {
    constructor() {
        this.db = window.db;
        this.auth = window.auth;
        this.initializeService();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    initializeService() {
        if (!this.db) {
            console.error('‚ùå Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        if (!this.auth) {
            console.error('‚ùå Firebase Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        console.log('‚úÖ Firebase —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    async getOrCreateUser(telegramUserId, userInfo) {
        try {
            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram ID:', telegramUserId);
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            const usersRef = this.db.collection('users');
            const snapshot = await usersRef.where('telegramId', '==', telegramUserId).limit(1).get();
            
            if (!snapshot.empty) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                const userDoc = snapshot.docs[0];
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', userDoc.id);
                return {
                    id: userDoc.id, // Firebase UID
                    ...userDoc.data()
                };
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram ID:', telegramUserId);
                
                const newUserData = {
                    telegramId: telegramUserId,
                    ...userInfo,
                    createdAt: new Date(),
                    updatedAt: new Date()
                };
                
                // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ID
                const newUserRef = await usersRef.add(newUserData);
                
                console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å Firebase ID:', newUserRef.id);
                return {
                    id: newUserRef.id,
                    ...newUserData
                };
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async saveProcedure(telegramUserId, procedure) {
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è Telegram ID:', telegramUserId);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            if (!telegramUserId || !procedure.id) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: telegramUserId –∏–ª–∏ procedure.id');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getOrCreateUser(telegramUserId, {
                firstName: procedure.userName.split(' ')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: procedure.userName.split(' ').slice(1).join(' ') || '',
                username: '',
                photoUrl: '',
                city: '–ú–æ—Å–∫–≤–∞',
                street: '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è'
            });

            const userRef = this.db.collection('users').doc(user.id);
            const proceduresRef = userRef.collection('procedures');
            
            const procedureData = {
                ...procedure,
                telegramUserId: telegramUserId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å Telegram
                createdAt: new Date(),
                updatedAt: new Date()
            };
            
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', procedureData);
            
            await proceduresRef.doc(procedure.id).set(procedureData);
            
            console.log('‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firebase');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                code: error.code,
                message: error.message,
                stack: error.stack
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            this.showErrorMessage(error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserProcedures(telegramUserId) {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è Telegram ID:', telegramUserId);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getOrCreateUser(telegramUserId, {
                firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: '',
                username: '',
                photoUrl: '',
                city: '–ú–æ—Å–∫–≤–∞',
                street: '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è'
            });

            const userRef = this.db.collection('users').doc(user.id);
            const proceduresRef = userRef.collection('procedures');
            const snapshot = await proceduresRef.orderBy('createdAt', 'desc').get();
            
            const procedures = [];
            snapshot.forEach(doc => {
                procedures.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä`);
            return procedures;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä:', error);
            this.showErrorMessage(error);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    async updateProcedure(telegramUserId, procedureId, updatedData) {
        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', { telegramUserId, procedureId, updatedData });
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getOrCreateUser(telegramUserId, {
                firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: '',
                username: '',
                photoUrl: '',
                city: '–ú–æ—Å–∫–≤–∞',
                street: '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è'
            });

            const userRef = this.db.collection('users').doc(user.id);
            const procedureRef = userRef.collection('procedures').doc(procedureId);
            
            const updateData = {
                ...updatedData,
                updatedAt: new Date()
            };
            
            await procedureRef.update(updateData);
            
            console.log('‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            this.showErrorMessage(error);
            return false;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    async deleteProcedure(telegramUserId, procedureId) {
        try {
            console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', { telegramUserId, procedureId });
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getOrCreateUser(telegramUserId, {
                firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: '',
                username: '',
                photoUrl: '',
                city: '–ú–æ—Å–∫–≤–∞',
                street: '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è'
            });

            const userRef = this.db.collection('users').doc(user.id);
            const procedureRef = userRef.collection('procedures').doc(procedureId);
            
            await procedureRef.delete();
            
            console.log('‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            this.showErrorMessage(error);
            return false;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async saveUserInfo(telegramUserId, userInfo) {
        try {
            console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è Telegram ID:', telegramUserId);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getOrCreateUser(telegramUserId, userInfo);
            
            const userRef = this.db.collection('users').doc(user.id);
            
            const userData = {
                ...userInfo,
                telegramId: telegramUserId,
                lastSeen: new Date(),
                updatedAt: new Date()
            };
            
            await userRef.set(userData, { merge: true });
            
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
            this.showErrorMessage(error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    async getAllUsers() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const usersRef = this.db.collection('users');
            const snapshot = await usersRef.get();
            
            const users = [];
            for (const doc of snapshot.docs) {
                const userData = doc.data();
                const proceduresSnapshot = await doc.ref.collection('procedures').get();
                
                users.push({
                    id: doc.id,
                    ...userData,
                    proceduresCount: proceduresSnapshot.size
                });
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            return users;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.showErrorMessage(error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    async getUserProceduresForAdmin(telegramUserId) {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞:', telegramUserId);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            const usersRef = this.db.collection('users');
            const snapshot = await usersRef.where('telegramId', '==', telegramUserId).limit(1).get();
            
            if (snapshot.empty) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return [];
            }
            
            const userDoc = snapshot.docs[0];
            const proceduresRef = userDoc.ref.collection('procedures');
            const proceduresSnapshot = await proceduresRef.orderBy('createdAt', 'desc').get();
            
            const procedures = [];
            proceduresSnapshot.forEach(doc => {
                procedures.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞`);
            return procedures;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.showErrorMessage(error);
            return [];
        }
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showErrorMessage(error) {
        let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.';
        
        if (error.code === 'permission-denied') {
            userMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Firebase.';
        } else if (error.code === 'unavailable') {
            userMessage = '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.code === 'unauthenticated') {
            userMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
        } else if (error.message.includes('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')) {
            userMessage = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (typeof showNotification === 'function') {
            showNotification(userMessage, 'error');
        } else {
            alert(userMessage);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
    async checkConnection() {
        try {
            if (!this.db) {
                return { connected: false, error: 'Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
            }
            
            // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            const testRef = this.db.collection('_test_connection');
            await testRef.limit(1).get();
            
            return { connected: true };
        } catch (error) {
            return { connected: false, error: error.message };
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
window.firebaseService = new FirebaseService();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof showNotification === 'undefined') {
    window.showNotification = function(message, type = 'info') {
        console.log(`[${type.toUpperCase()}] ${message}`);
        alert(message);
    };
}
