// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Firestore
class FirebaseService {
    constructor() {
        this.db = window.db;
        this.auth = window.auth;
        this.initializeService();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    initializeService() {
        if (!this.db) {
            console.error('‚ùå Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        if (!this.auth) {
            console.error('‚ùå Firebase Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        console.log('‚úÖ Firebase —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    async createOrGetUser(telegramId, userInfo) {
        try {
            console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram ID:', telegramId);
            if (!this.auth?.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const uid = this.auth.currentUser.uid;
            const userRef = this.db.collection('users').doc(uid);
            const userDoc = await userRef.get();
            const isAdmin = this.isAdmin(telegramId);
            
            if (!userDoc.exists) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
                await userRef.set({
                    telegramId: telegramId,
                    ...userInfo,
                    isAdmin: isAdmin,
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
                await userRef.update({
                    lastSeen: new Date(),
                    updatedAt: new Date(),
                    isAdmin: isAdmin
                });
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞');
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return false;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    async saveProcedure(telegramId, procedure) {
        try {
            console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            if (!this.auth?.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É
            const uid = this.auth.currentUser.uid;
            const userRef = this.db.collection('users').doc(uid);
            const proceduresRef = userRef.collection('procedures');
            
            const procedureData = {
                ...procedure,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            
            await proceduresRef.doc(procedure.id).set(procedureData);
            
            console.log('‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserProcedures(telegramId) {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            if (!this.auth?.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const uid = this.auth.currentUser.uid;
            const userRef = this.db.collection('users').doc(uid);
            const proceduresRef = userRef.collection('procedures');
            const snapshot = await proceduresRef.orderBy('createdAt', 'desc').get();
            
            const procedures = [];
            snapshot.forEach(doc => {
                procedures.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä`);
            return procedures;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä:', error);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    async updateProcedure(telegramId, procedureId, updatedData) {
        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', { telegramId, procedureId });
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            if (!this.auth?.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const uid = this.auth.currentUser.uid;
            const userRef = this.db.collection('users').doc(uid);
            const procedureRef = userRef.collection('procedures').doc(procedureId);
            
            const updateData = {
                ...updatedData,
                updatedAt: new Date()
            };
            
            await procedureRef.update(updateData);
            
            console.log('‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            return false;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    async deleteProcedure(telegramId, procedureId) {
        try {
            console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', { telegramId, procedureId });
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            if (!this.auth?.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }

            const uid = this.auth.currentUser.uid;
            const userRef = this.db.collection('users').doc(uid);
            const procedureRef = userRef.collection('procedures').doc(procedureId);
            
            await procedureRef.delete();
            
            console.log('‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    async getAllUsersWithProcedures() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏');
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const usersRef = this.db.collection('users');
            const snapshot = await usersRef.get();
            
            const users = [];
            for (const doc of snapshot.docs) {
                const userData = doc.data();
                
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const proceduresSnapshot = await doc.ref.collection('procedures').get();
                const proceduresCount = proceduresSnapshot.size;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                if (proceduresCount > 0) {
                    users.push({
                        id: doc.id,
                        ...userData,
                        proceduresCount: proceduresCount
                    });
                }
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏`);
            return users;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    async getUserProceduresForAdmin(userUid) {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞:', userUid);
            
            if (!this.db) {
                throw new Error('Firebase Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            const userRef = this.db.collection('users').doc(userUid.toString());
            const proceduresRef = userRef.collection('procedures');
            const snapshot = await proceduresRef.orderBy('createdAt', 'desc').get();
            
            const procedures = [];
            snapshot.forEach(doc => {
                procedures.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞`);
            return procedures;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return [];
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    isAdmin(telegramId) {
        const adminIds = ['1435191157']; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return adminIds.includes(telegramId.toString());
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
    async checkConnection() {
        try {
            if (!this.db) {
                return { connected: false, error: 'Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
            }
            
            // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            const testRef = this.db.collection('_test_connection');
            await testRef.limit(1).get();
            
            return { connected: true };
        } catch (error) {
            return { connected: false, error: error.message };
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
window.firebaseService = new FirebaseService();
